{"ast":null,"code":"var _jsxFileName = \"/Users/pranayreddy/Desktop/react-app/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm(props) {\n  _s();\n\n  // For now I prefer the individual way\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n\n  function titleChangeHandler(changeEvent) {\n    setEnteredTitle(changeEvent.target.value);\n  }\n\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n\n  function amountChangeHandler(changeEvent) {\n    setEnteredAmount(changeEvent.target.value);\n  }\n\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  function dateChangeHandler(changeEvent) {\n    setEnteredDate(changeEvent.target.value);\n  } // This is way of updating 3 individual states, we can also put em all in an object\n  // const [userState, setUserState] = useState({\n  //   enteredTitle: \"Title\",\n  //   enteredAmount: \"Amount\",\n  //   enteredDate: \"Date\",\n  // });\n  // Simply update the whole object in the function. use the spread and override intended property\n  // function titleChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredTitle : changeEvent.target.value,\n  //     })\n  // }\n  // function amountChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredAmount : changeEvent.target.value,\n  //     })\n  // }\n  // function dateChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredDate: changeEvent.target.value,\n  //     })\n  // }\n  // Above is bad too, when we use current state to update next state, we should use a function inside the updater\n  // React sends in pastState parameter by default when we use a function in updater\n  // Previous manual way may contain inconistency becuase of internal scheduling. But passing function way, react guarantees that it is exactly previous state\n  // function titleChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredTitle : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n  // function amountChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredAmount : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n  // function dateChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredDate : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n\n\n  function submitHandler(event) {\n    event.preventDefault(); // Make a wrapper for expense item props\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    }; // Note that intention is to clear input fields after submit\n    // This just changes the internal state variable.\n    // To reflect in our input element, set value = {stateVariable}\n\n    setEnteredAmount(\"\");\n    setEnteredTitle(\"\");\n    setEnteredDate(\"\");\n    props.onSaveExpenseData(expenseData);\n  }\n\n  return (\n    /*#__PURE__*/\n    // The onChange listens and raises state handlers for every change i.e keystroke\n    // value is set to a state variable so that onSubmit, the reset from submitHandler is reflected\n    // Don't confuse and think it is an infinite loop. Only user changes raise onChange\n    // The reflection/change due to react state update doesn't raise onChange\n    // This concept is called two-way binding. Listen to user input and modify/decide what to show in HTML elements\n    _jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: titleChangeHandler,\n            value: enteredTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            value: enteredAmount,\n            onChange: amountChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"01-01-2019\",\n            max: \"31-12-2022\",\n            onChange: dateChangeHandler,\n            value: enteredDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: props.switchModeHandler,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add new expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/pranayreddy/Desktop/react-app/src/components/NewExpense/ExpenseForm.js"],"names":["useState","ExpenseForm","props","enteredTitle","setEnteredTitle","titleChangeHandler","changeEvent","target","value","enteredAmount","setEnteredAmount","amountChangeHandler","enteredDate","setEnteredDate","dateChangeHandler","submitHandler","event","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","switchModeHandler"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nfunction ExpenseForm(props) {\n  // For now I prefer the individual way\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  function titleChangeHandler(changeEvent) {\n    setEnteredTitle(changeEvent.target.value);\n  }\n\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  function amountChangeHandler(changeEvent) {\n    setEnteredAmount(changeEvent.target.value);\n  }\n\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  function dateChangeHandler(changeEvent) {\n    setEnteredDate(changeEvent.target.value);\n  }\n\n  // This is way of updating 3 individual states, we can also put em all in an object\n  // const [userState, setUserState] = useState({\n  //   enteredTitle: \"Title\",\n  //   enteredAmount: \"Amount\",\n  //   enteredDate: \"Date\",\n  // });\n\n  // Simply update the whole object in the function. use the spread and override intended property\n  // function titleChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredTitle : changeEvent.target.value,\n  //     })\n  // }\n\n  // function amountChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredAmount : changeEvent.target.value,\n  //     })\n  // }\n\n  // function dateChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredDate: changeEvent.target.value,\n  //     })\n  // }\n\n  // Above is bad too, when we use current state to update next state, we should use a function inside the updater\n  // React sends in pastState parameter by default when we use a function in updater\n  // Previous manual way may contain inconistency becuase of internal scheduling. But passing function way, react guarantees that it is exactly previous state\n  // function titleChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredTitle : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n\n  // function amountChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredAmount : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n\n  // function dateChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredDate : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // Make a wrapper for expense item props\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    // Note that intention is to clear input fields after submit\n    // This just changes the internal state variable.\n    // To reflect in our input element, set value = {stateVariable}\n    setEnteredAmount(\"\");\n    setEnteredTitle(\"\");\n    setEnteredDate(\"\");\n    props.onSaveExpenseData(expenseData);\n  }\n\n  return (\n    // The onChange listens and raises state handlers for every change i.e keystroke\n    // value is set to a state variable so that onSubmit, the reset from submitHandler is reflected\n    // Don't confuse and think it is an infinite loop. Only user changes raise onChange\n    // The reflection/change due to react state update doesn't raise onChange\n\n    // This concept is called two-way binding. Listen to user input and modify/decide what to show in HTML elements\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            onChange={titleChangeHandler}\n            value={enteredTitle}\n          />\n        </div>\n\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"01-01-2019\"\n            max=\"31-12-2022\"\n            onChange={dateChangeHandler}\n            value={enteredDate}\n          />\n        </div>\n      </div>\n\n      <div className=\"new-expense__actions\">\n        <button onClick={props.switchModeHandler}>Cancel</button>\n      </div>\n\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add new expense</button>\n      </div>\n\n    </form>\n  );\n}\n\nexport default ExpenseForm;\n"]},"metadata":{},"sourceType":"module"}