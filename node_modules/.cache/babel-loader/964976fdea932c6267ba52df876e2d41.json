{"ast":null,"code":"var _jsxFileName = \"/Users/pranayreddy/Desktop/react-app/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm() {\n  _s();\n\n  // For now I prefer the individual way\n  const [enteredTitle, setEnteredTitle] = useState(\"Title\");\n\n  function titleChangeHandler(changeEvent) {\n    if (changeEvent.target.value === \"\") setEnteredTitle(\"Title\");else setEnteredTitle(changeEvent.target.value);\n  }\n\n  const [enteredAmount, setEnteredAmount] = useState(\"Amount\");\n\n  function amountChangeHandler(changeEvent) {\n    if (changeEvent.target.value === \"\") setEnteredAmount(\"Amount\");else setEnteredAmount(changeEvent.target.value);\n  }\n\n  const [enteredDate, setEnteredDate] = useState(\"Date\");\n\n  function dateChangeHandler(changeEvent) {\n    if (changeEvent.target.value === \"\") setEnteredDate(\"Date \");else setEnteredDate(changeEvent.target.value);\n  } // This is way of updating 3 individual states, we can also put em all in an object\n  // const [userState, setUserState] = useState({\n  //   enteredTitle: \"Title\",\n  //   enteredAmount: \"Amount\",\n  //   enteredDate: \"Date\",\n  // });\n  // Simply update the whole object in the function. use the spread and override intended property\n  // function titleChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredTitle : changeEvent.target.value,\n  //     })\n  // }\n  // function amountChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredAmount : changeEvent.target.value,\n  //     })\n  // }\n  // function dateChangeHandler(changeEvent) {\n  //     setUserState({\n  //         ...userState,\n  //         enteredDate: changeEvent.target.value,\n  //     })\n  // }\n  // Above is bad too, when we use current state to update next state, we should use a function inside the updater\n  // React sends in pastState parameter by default when we use a function in updater\n  // Previous manual way may contain inconistency becuase of internal scheduling. But passing function way, react guarantees that it is exactly previous state\n  // function titleChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredTitle : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n  // function amountChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredAmount : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n  // function dateChangeHandler(changeEvent) {\n  //     setUserState(function(pastState){\n  //         return {\n  //             ...pastState,\n  //             enteredDate : changeEvent.target.value,\n  //         }\n  //     })\n  // }\n\n\n  function submitHandler(event) {\n    event.preventDefault(); // Make a wrapper for expense item props\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    console.log(expenseData);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: userState.enteredTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: userState.enteredAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: userState.enteredDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"01-01-2019\",\n          max: \"31-12-2022\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add new expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExpenseForm, \"a3w5CSHQtpd6mI36jF4WV6dFQ1k=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/pranayreddy/Desktop/react-app/src/components/NewExpense/ExpenseForm.js"],"names":["useState","ExpenseForm","enteredTitle","setEnteredTitle","titleChangeHandler","changeEvent","target","value","enteredAmount","setEnteredAmount","amountChangeHandler","enteredDate","setEnteredDate","dateChangeHandler","submitHandler","event","preventDefault","expenseData","title","amount","date","Date","console","log","userState"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nfunction ExpenseForm() {\n\n    // For now I prefer the individual way\n    const [enteredTitle, setEnteredTitle] = useState(\"Title\");\n    function titleChangeHandler(changeEvent) {\n      if(changeEvent.target.value === \"\") setEnteredTitle(\"Title\");\n      else setEnteredTitle(changeEvent.target.value);\n    }\n\n    const [enteredAmount, setEnteredAmount] = useState(\"Amount\");\n    function amountChangeHandler(changeEvent) {\n      if(changeEvent.target.value === \"\") setEnteredAmount(\"Amount\");\n      else setEnteredAmount(changeEvent.target.value);\n    }\n\n    const [enteredDate, setEnteredDate] = useState(\"Date\");\n    function dateChangeHandler(changeEvent) {\n      if(changeEvent.target.value === \"\") setEnteredDate(\"Date \");\n      else setEnteredDate(changeEvent.target.value);\n    }\n\n\n\n\n\n    // This is way of updating 3 individual states, we can also put em all in an object\n  // const [userState, setUserState] = useState({\n  //   enteredTitle: \"Title\",\n  //   enteredAmount: \"Amount\",\n  //   enteredDate: \"Date\",\n  // });\n\n\n\n    // Simply update the whole object in the function. use the spread and override intended property\n    // function titleChangeHandler(changeEvent) {\n    //     setUserState({\n    //         ...userState,\n    //         enteredTitle : changeEvent.target.value,\n    //     })\n    // }\n\n    // function amountChangeHandler(changeEvent) {\n    //     setUserState({\n    //         ...userState,\n    //         enteredAmount : changeEvent.target.value,\n    //     })\n    // }\n\n    // function dateChangeHandler(changeEvent) {\n    //     setUserState({\n    //         ...userState,\n    //         enteredDate: changeEvent.target.value,\n    //     })\n    // }\n\n\n\n\n\n\n\n\n    // Above is bad too, when we use current state to update next state, we should use a function inside the updater\n    // React sends in pastState parameter by default when we use a function in updater\n    // Previous manual way may contain inconistency becuase of internal scheduling. But passing function way, react guarantees that it is exactly previous state\n    // function titleChangeHandler(changeEvent) {\n    //     setUserState(function(pastState){\n    //         return {\n    //             ...pastState,\n    //             enteredTitle : changeEvent.target.value,\n    //         }\n    //     })\n    // }\n\n    // function amountChangeHandler(changeEvent) {\n    //     setUserState(function(pastState){\n    //         return {\n    //             ...pastState,\n    //             enteredAmount : changeEvent.target.value,\n    //         }\n    //     })\n    // }\n\n    // function dateChangeHandler(changeEvent) {\n    //     setUserState(function(pastState){\n    //         return {\n    //             ...pastState,\n    //             enteredDate : changeEvent.target.value,\n    //         }\n    //     })\n    // }\n\n    function submitHandler(event){\n        event.preventDefault();\n\n        // Make a wrapper for expense item props\n        const expenseData = {\n          title : enteredTitle,\n          amount : enteredAmount,\n          date : new Date(enteredDate),\n        }\n        console.log(expenseData);\n\n    }\n\n  return (\n    <form onSubmit = {submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>{userState.enteredTitle}</label>\n          <input type=\"text\" onChange={titleChangeHandler} />\n        </div>\n\n        <div className=\"new-expense__control\">\n          <label>{userState.enteredAmount}</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={amountChangeHandler}\n          />\n        </div>\n\n        <div className=\"new-expense__control\">\n          <label>{userState.enteredDate}</label>\n          <input\n            type=\"date\"\n            min=\"01-01-2019\"\n            max=\"31-12-2022\"\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add new expense</button>\n      </div>\n    </form>\n  );\n}\n\nexport default ExpenseForm;\n"]},"metadata":{},"sourceType":"module"}